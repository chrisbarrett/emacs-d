{"id":"emacs-1","content_hash":"e16aca1fd678eb327bd24a72d5e89b8153e05a338e1c402916c66b6208a6840e","title":"Investigate **loose** buffer save prompt when killing buffers","description":"When trying to kill an unsaved buffer, Emacs also prompts whether to save a buffer called **loose**. This behavior is unexpected and needs investigation to determine which package is creating this buffer.","status":"open","priority":2,"issue_type":"bug","created_at":"2025-10-27T13:54:29.020899+13:00","updated_at":"2025-10-30T18:57:02.72831+13:00"}
{"id":"emacs-10","content_hash":"926e0f6d6aaae1bb8bf31e2e1dba6f4293b557e2d01f74d862375999debeff7b","title":"Create magit-style interface for beads (bd)","description":"Build a magit-style transient interface for interacting with beads issue tracking system. Should provide keyboard-driven UI for common bd operations: listing issues, creating/updating/closing issues, managing dependencies, viewing issue details, and navigating between related issues. Similar to how magit provides an elegant interface to git.","status":"open","priority":2,"issue_type":"feature","created_at":"2025-10-29T06:38:56.766037+13:00","updated_at":"2025-10-30T18:57:02.729119+13:00"}
{"id":"emacs-11","content_hash":"432be20ec2315c922382e385dfec1507d83aa8c4fa1d435ea52dd11d8e57a7a4","title":"Create magit-style interface for Linear","description":"Build a magit-style transient interface for interacting with Linear issue tracking. Should provide keyboard-driven UI for viewing issues, creating/updating issues, changing status, assigning work, managing labels/projects, and navigating between related issues. Use Linear API to integrate seamlessly without leaving Emacs.","status":"open","priority":2,"issue_type":"feature","created_at":"2025-10-29T06:38:56.814045+13:00","updated_at":"2025-10-30T18:57:02.729487+13:00"}
{"id":"emacs-12","content_hash":"46aabbcf05fef647d832a3bd662f7adb73dd0ca154238c7cc00c474fe5218bc0","title":"Add dimmer background for non-selected windows","description":"Implement visual distinction between selected and non-selected windows by dimming the background color of inactive windows. Need to provide appropriate dimming values for both modus-operandi (light) and modus-vivendi (dark) themes to ensure good contrast and readability. Consider using auto-dim-other-buffers-mode or implementing custom face remapping for default face in non-selected windows.","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-29T06:43:55.471599+13:00","updated_at":"2025-10-30T18:57:02.729851+13:00","closed_at":"2025-10-30T00:05:12.949193+13:00"}
{"id":"emacs-13","content_hash":"630b1ec807e98d38d083e05370aa30914512b183158058b3ac1017f0171e95dd","title":"Use project name for tab-bar initial tab in frames","description":"Customize tab-bar to automatically name the initial tab based on project context. For the initial frame, use the current project name. For dedicated frames (project-specific frames), use the frame's dedicated project name. This will provide better context when working with multiple projects across different frames. Should leverage tab-bar's customization hooks like tab-bar-tab-name-function or tab-bar-tab-name-format-function.","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-29T06:46:52.224402+13:00","updated_at":"2025-10-30T18:57:02.730282+13:00","closed_at":"2025-10-29T09:00:23.012277+13:00"}
{"id":"emacs-14","content_hash":"fd9f99fb53baf463715ad4eab41c2928a429da1721432b6c3ff467fcb1c37f13","title":"Add 'c' command to worktree transient to open claude-code-ide buffer","description":"Add a 'c' command to the worktree transient that opens the claude-code-ide buffer for the current worktree-tab. This will allow quick access to the Claude Code IDE from the worktree transient interface.","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-29T11:06:52.812001+13:00","updated_at":"2025-10-30T18:57:02.730632+13:00","closed_at":"2025-10-29T11:54:59.90327+13:00"}
{"id":"emacs-15","content_hash":"668b8e59de8d2e9c7ff6d615d5dbf2f41cdb4abbfbf4f12b7b3bd73ffbc23f57","title":"Fix Claude Code IDE scrolling behavior in eat window","description":"The Claude Code IDE currently runs in an eat terminal window, but has two scrolling issues:\n\n**Problem 1: Over-scrolling beyond buffer content**\nIt's possible to scroll beyond the actual number of lines in the buffer, causing content to end up at the top of the screen with empty space below. Emacs should prevent scrolling past the actual buffer content.\n\n**Problem 2: Not auto-scrolling to bottom on window focus**\nWhen hiding/deleting the window or switching to another frame, then returning to the claude-code-ide buffer, it remains at the previous scroll position even if new content was written. The buffer should automatically scroll to the bottom (to keep the text entry at the bottom of the window) when switching back to the buffer/window.","status":"closed","priority":2,"issue_type":"bug","created_at":"2025-10-29T11:23:27.758958+13:00","updated_at":"2025-10-30T18:57:02.731694+13:00","closed_at":"2025-10-29T11:50:05.176691+13:00"}
{"id":"emacs-16","content_hash":"c0042752025fab50a5b46e8c438794b03368e6c61cf8998f7ee98bcd512ce6a2","title":"Worktree close command fails git operations due to incorrect working directory","description":"The command to close a beads issue from a worktree and merge changes into main is broken. It successfully destroys the tab and claude-code-ide session, but fails on git operations because they're running in the wrong working directory.\n\n**Error from magit command log:**\n```\n128 .git/worktrees/ git … switch main\nfatal: this operation must be run in a work tree\n\n128 .git/worktrees/ git … merge --no-edit emacs-14-add-c-command-to-worktree-transient-to-open-claude-code-ide-buffer\nfatal: this operation must be run in a work tree\n```\n\nThe git commands are being executed in `.git/worktrees/` instead of the actual work tree directory, causing them to fail. The commands need to run in the proper working directory (either the main repo or the worktree directory).","status":"closed","priority":1,"issue_type":"bug","created_at":"2025-10-29T11:35:19.170694+13:00","updated_at":"2025-10-31T12:10:24.283779+13:00","closed_at":"2025-10-31T12:10:24.283779+13:00"}
{"id":"emacs-18","content_hash":"f4a5a270c1a43b9cc3ec651e2b3728ada691b264494a5e5e2e583b0ae959416a","title":"Auto-run prettier on save for markdown files","description":"Configure Emacs to automatically run prettier on save for markdown files, with support for GitHub-flavoured markdown.","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-29T16:38:37.943702+13:00","updated_at":"2025-10-30T18:57:02.732705+13:00","closed_at":"2025-10-29T18:30:51.982406+13:00"}
{"id":"emacs-19","content_hash":"ee152961050a54ed60562f4b4bf43110812041749df7895f99d80693a20ded34","title":"Fix inconsistent all-the-icons font rendering on work MacBook","description":"The all-the-icons fonts render inconsistently on work MacBook. For example, in mod-tabs.el, the git branch icon renders correctly in buffer text, but when displayed in a tab bar, it uses the java icon instead. This issue does not occur on personal MacBook, suggesting a difference in installations or font configuration between the two machines.","status":"closed","priority":2,"issue_type":"bug","created_at":"2025-10-29T16:42:38.046377+13:00","updated_at":"2025-10-30T18:57:02.732878+13:00","closed_at":"2025-10-29T22:02:14.6823+13:00"}
{"id":"emacs-2","content_hash":"6fb0f7e6ba611ef1a8c24912f4e1112f457678f9eb6b6f1fe7664e14e91e991a","title":"Backport zellij claude-code workspace workflow into Emacs","description":"Port the zellij-based Claude Code workspace workflow into Emacs, enabling seamless management of multiple workspaces and worktrees within the editor.","status":"closed","priority":2,"issue_type":"epic","created_at":"2025-10-27T14:02:13.847115+13:00","updated_at":"2025-10-30T18:57:02.733165+13:00","closed_at":"2025-10-28T20:24:08.19949+13:00"}
{"id":"emacs-20","content_hash":"df36617ed30117a9482331ca087a39a9987f08367e05eeeadd0750a50581ec11","title":"Teach claude-code-ide to send desktop notifications when waiting for user interaction in non-focused tabs and frames","description":"When claude-code-ide is waiting for user interaction (e.g., approval for tool use, user input, or decision points) and the relevant tab or frame is not currently focused, it should send a desktop notification to alert the user. This would prevent users from missing prompts when they've switched to another application or Emacs frame/tab while Claude is working.","status":"in_progress","priority":2,"issue_type":"feature","created_at":"2025-10-29T16:48:18.902191+13:00","updated_at":"2025-10-30T18:57:02.733338+13:00"}
{"id":"emacs-21","content_hash":"96763ffab2649ca3af66a504d0e32414ccb3acf4d3753e22dd52b5ff789a5e99","title":"Add marginalia to bd issue selector for worktree, tab, and claude-code status","description":"The bd issue selector in the worktree transient is useful for spinning up worktrees or switching to existing ones. It would be more helpful if it displayed status indicators showing:\n- Whether there is an existing worktree for the issue\n- Whether there is a dedicated tab for the issue\n- The current claude-code status (e.g., idle, working, waiting for input)\n\nThis would provide at-a-glance visibility into agent progress and workspace state without needing to navigate to each issue. This complements the broader bd integration work in emacs-10.","status":"open","priority":2,"issue_type":"feature","created_at":"2025-10-29T16:55:58.498129+13:00","updated_at":"2025-10-30T18:57:02.733502+13:00","dependencies":[{"issue_id":"emacs-21","depends_on_id":"emacs-10","type":"blocks","created_at":"2025-10-29T16:55:58.49995+13:00","created_by":"daemon"}]}
{"id":"emacs-22","content_hash":"33699b9853410af0d2c1c8f769026dfbb99d61660f08e7a1dc805f2eecb951ff","title":"Add command to worktree transient for creating bd issues via Claude Code","description":"Create a command in the worktree transient that allows creating bd issues interactively using Claude Code. \n\nWorkflow:\n1. User invokes command from worktree transient\n2. Opens a buffer (git-commit-style) for composing the issue description\n3. User types what they want to tell the LLM about the issue\n4. C-c C-k aborts and closes the buffer\n5. C-c C-c sends buffer contents to a Claude Code one-shot session running in the repo root\n6. Claude Code creates the bd issue based on the description\n7. Display desktop notification when issue is successfully created\n\nThis provides a natural way to leverage Claude's understanding to create well-structured issues without leaving Emacs, and integrates smoothly with the existing worktree workflow.","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-29T17:10:13.83745+13:00","updated_at":"2025-10-30T18:57:02.733682+13:00","closed_at":"2025-10-30T13:48:09.309338+13:00"}
{"id":"emacs-23","content_hash":"d5089897e61136d2d91360bfad7d5008a89f93a9488d92d48bd449d505a7b469","title":"Configure org-mode exports to disable TOCs and HTML entities","description":"Configure org-mode exports to:\n- Never create TOCs (table of contents)\n- Never use HTML entities (use unicode instead)","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-30T13:24:43.516528+13:00","updated_at":"2025-10-30T18:57:02.73385+13:00","closed_at":"2025-10-30T14:27:17.926187+13:00"}
{"id":"emacs-24","content_hash":"4b46ff7ea5cdbdc8f0120c4ffd24e3ada5cf31bab1bce70043158c0f139cf662","title":"Add font-locking for # comments in bd issue creation buffer","description":"Teach bd new issue to use font-locking to treat # lines as comments","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-30T19:09:40.091582+13:00","updated_at":"2025-10-30T19:16:13.625863+13:00","closed_at":"2025-10-30T19:16:13.625863+13:00"}
{"id":"emacs-25","content_hash":"35a73c7498ab05360ce60144cadef18bcc76f532f295ce1ff32a012a6e57c3db","title":"Debug issue creation function - process killed with signal 9","description":"The bd issue creation function (+bd-issue-create-with-claude) is failing with error \"killed: 9\" after the Claude Code process completes.\n\nError message:\n```\nEnter issue details. C-c C-c to create, C-c C-k to cancel.\nCreating issue via Claude Code...done\nIssue creation with Claude failed: killed: 9\n```\n\nNeed to investigate why the process is being killed with SIGKILL and fix the error handling/process management.","notes":"Root cause is likely that the Claude Code one-shot session doesn't call mcp__plugin_beads_beads__set_context before trying to call mcp__plugin_beads_beads__create.\n\nThe MCP beads server requires set_context to be called first to establish the workspace_root and database path. Without this, the create call fails.\n\nFix: Ensure the prompt passed to Claude Code includes instructions to call set_context with the workspace root before attempting to create the issue.","status":"closed","priority":1,"issue_type":"bug","created_at":"2025-10-30T19:55:08.082651+13:00","updated_at":"2025-10-30T20:00:21.856571+13:00","closed_at":"2025-10-30T20:00:21.856571+13:00"}
{"id":"emacs-26","content_hash":"95a943b46c641f1872207e4e0061cf9df6fb15604397dccbe6bdb0beb856cd5f","title":"Implement syntax highlighting for GFM callouts","description":"Add font-lock support for GitHub-flavored markdown callouts. Keywords in callout syntax like `\u003e [!IMPORTANT]` should have appropriate faces applied via font lock.","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-30T23:22:11.695023+13:00","updated_at":"2025-10-30T23:22:11.695023+13:00","closed_at":"2025-10-30T22:35:46.545618+13:00"}
{"id":"emacs-27","content_hash":"ed4f40a1ea359bb4b3fa2758e468b469a022fba3ae1130391ccc8afa37da6f78","title":"Add syntax highlighting for GitHub markdown callout keywords","description":"Add fontification support for GitHub markdown callout box keywords like [!IMPORTANT], [!NOTE], [!WARNING], etc. in markdown-mode.\n\nCallouts have the syntax:\n\u003e [!KEYWORD]\n\u003e Content here\n\nThe keywords should be highlighted appropriately based on their semantic meaning.","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-30T20:52:41.994298+13:00","updated_at":"2025-10-31T12:10:27.896027+13:00","closed_at":"2025-10-31T12:10:27.896027+13:00"}
{"id":"emacs-28","content_hash":"40368615e27c33b5b5ec8a65c71607d7299a4c381431f30d7f0b4d12ce6054e8","title":"Teach bd-new-issue buffers to support message history like git-commit buffers","description":"Git commit buffers allow you to cycle forward and backward through a history of previous messages, which is very useful for retrying after an error. We should support that too.","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-30T23:22:11.695863+13:00","updated_at":"2025-10-30T23:22:11.695863+13:00","closed_at":"2025-10-30T22:35:59.73709+13:00"}
{"id":"emacs-29","content_hash":"fee4d2195db63868ea37047620b307d5143e1e218806b0688005f10ef351313b","title":"Make the worktree destroy command clean up the git branch","description":"The worktree destroy command should automatically clean up the associated git branch when removing a worktree.","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-30T23:22:11.696734+13:00","updated_at":"2025-10-31T17:07:56.590118+13:00","closed_at":"2025-10-31T17:07:56.590118+13:00"}
{"id":"emacs-3","content_hash":"bdae026ebd99271174d8acf1df57f5843f6796878896887445c41d9a9033035e","title":"Use tabs to represent git worktrees with M-S-, and M-S-. navigation","description":"Investigate using Emacs tabs to represent git worktrees, allowing users to switch between worktrees using M-S-, (previous) and M-S-. (next) keybindings.","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-27T14:02:19.396989+13:00","updated_at":"2025-10-30T18:57:02.734277+13:00","closed_at":"2025-10-28T20:22:54.473359+13:00","dependencies":[{"issue_id":"emacs-3","depends_on_id":"emacs-2","type":"blocks","created_at":"2025-10-29T10:02:39.636842+13:00","created_by":"import"}]}
{"id":"emacs-30","content_hash":"c0e8088b2e084587cc926adeb187be54a343b857d0323f7d468cc151a5d6f018","title":"Implement syntax highlighting for GFM callouts","description":"Add font-lock support for GitHub-flavored markdown callouts. Keywords in callout syntax like `\u003e [!IMPORTANT]` should have appropriate faces applied via font lock.","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-30T23:22:11.694267+13:00","updated_at":"2025-10-31T12:10:29.861831+13:00","closed_at":"2025-10-31T12:10:29.861831+13:00"}
{"id":"emacs-31","content_hash":"d402fa57f162462cf638a973a09e03fd70aad365c4e196114af8fd9dff57d7e4","title":"Teach bd-new-issue buffers to support message history like git-commit buffers","description":"Git commit buffers allow you to cycle forward and backward through a history of previous messages, which is very useful for retrying after an error. We should support that too.","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-30T23:22:11.695296+13:00","updated_at":"2025-10-31T12:10:31.783448+13:00","closed_at":"2025-10-31T12:10:31.783448+13:00"}
{"id":"emacs-37","content_hash":"e69b567583dbf2a2b8b2433b6daf5b2ff1c91a11137e4815ac94c3b63304c30b","title":"Support :emoji: display in git-commit-mode and magit","description":"Add support for rendering GitHub-style emoji codes (e.g., :smile:, :rocket:, :lipstick:) as actual emoji characters in git-commit-mode and magit buffers. This would improve readability of commit messages that use conventional emoji prefixes.","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-31T12:10:24.281056+13:00","updated_at":"2025-10-31T12:10:24.281056+13:00","closed_at":"2025-10-30T19:30:20.788739+13:00"}
{"id":"emacs-38","content_hash":"a5fdbe148162396052ab0dc55177b61d57b87a833d60c0d48a7410577527215b","title":"testing the new JSON-based implementation","description":"","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-31T18:41:25.308696+13:00","updated_at":"2025-10-31T18:42:25.559446+13:00","closed_at":"2025-10-31T18:42:25.559446+13:00"}
{"id":"emacs-4","content_hash":"a9e13740668bf78a687a06449468fff0890671219d071593494bcbe7604c3590","title":"Rapidly switch to or create worktree tab with M-S-o","description":"Implement M-S-o command that shows a completing-read prompt for existing worktrees. If the user enters a non-matching input, create a new worktree under .worktrees/ with that input as the branch name. The completing-read should validate input to ensure only legal git branch names are accepted.\n\nWhen opening a new tab for a worktree:\n- Open dired at the worktree root\n- Start a claude-code-ide instance for that worktree\n\nIf the tab already exists, simply switch to it.","acceptance_criteria":"- M-S-o opens a completing-read prompt showing existing worktrees\n- Entering a non-matching name creates a new worktree under .worktrees/ with that branch name\n- Input validation prevents illegal git branch names\n- New tabs open with dired at worktree root\n- New tabs have a claude-code-ide instance running for that worktree\n- Existing tabs are switched to rather than recreated","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-27T14:06:17.696599+13:00","updated_at":"2025-10-30T18:57:02.734446+13:00","closed_at":"2025-10-28T20:23:10.287059+13:00","dependencies":[{"issue_id":"emacs-4","depends_on_id":"emacs-2","type":"blocks","created_at":"2025-10-29T10:02:39.637186+13:00","created_by":"import"}]}
{"id":"emacs-5","content_hash":"ec427ea1e87b3d7ba128c1da4004a4d2198c40cba4daae38b65e3830cffd140a","title":"M-g opens custom transient with git actions for worktrees","description":"Implement M-g keybinding that opens a custom transient menu with common git actions specifically designed for worktree management. This will serve as the central hub for worktree operations.","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-27T14:14:44.493422+13:00","updated_at":"2025-10-30T18:57:02.737144+13:00","closed_at":"2025-10-28T20:23:22.280721+13:00","dependencies":[{"issue_id":"emacs-5","depends_on_id":"emacs-2","type":"blocks","created_at":"2025-10-29T10:02:39.637504+13:00","created_by":"import"}]}
{"id":"emacs-6","content_hash":"288520985e9ebee457cc1524efeab4a1fd2c39d05dc0f5402b0ca63bb6ec207c","title":"Add X binding to transient: delete tab, worktree, and branch","description":"Add X binding to the worktree transient that deletes the current tab, removes the worktree, and deletes the branch. Must check for unstaged or uncommitted changes first and error with a message telling the user to get to a clean state before deletion.","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-27T14:14:53.151644+13:00","updated_at":"2025-10-30T18:57:02.737482+13:00","closed_at":"2025-10-28T20:23:31.487909+13:00","dependencies":[{"issue_id":"emacs-6","depends_on_id":"emacs-5","type":"blocks","created_at":"2025-10-29T10:02:39.637783+13:00","created_by":"import"}]}
{"id":"emacs-7","content_hash":"ff8a02d3292b2906ab962d205ae216770d01a6751f7b4e19e352d8a0d95c5177","title":"Add M binding to transient: merge to main and cleanup","description":"Add M binding to the worktree transient that merges the current worktree branch to main, then performs the same cleanup as the X binding (delete tab, worktree, and branch).","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-27T14:14:53.196196+13:00","updated_at":"2025-10-30T18:57:02.737646+13:00","closed_at":"2025-10-28T20:23:43.730032+13:00","dependencies":[{"issue_id":"emacs-7","depends_on_id":"emacs-5","type":"blocks","created_at":"2025-10-29T10:02:39.638118+13:00","created_by":"import"},{"issue_id":"emacs-7","depends_on_id":"emacs-6","type":"blocks","created_at":"2025-10-29T10:02:39.638389+13:00","created_by":"import"}]}
{"id":"emacs-8","content_hash":"4009a32de3182a0a7eece083f1898549d2f44c5ee7886ecaff95be1d75f48304","title":"Add r binding to transient: rebase worktree on main","description":"Add r binding to the worktree transient that rebases the current worktree branch on main.","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-27T14:14:53.241131+13:00","updated_at":"2025-10-30T18:57:02.737817+13:00","closed_at":"2025-10-28T20:23:57.640072+13:00","dependencies":[{"issue_id":"emacs-8","depends_on_id":"emacs-5","type":"blocks","created_at":"2025-10-29T10:02:39.638644+13:00","created_by":"import"}]}
{"id":"emacs-9","content_hash":"bad977dc8474c52d90cc4e7e664348726573030fab77b6a862b0be2a2d5ea26b","title":"Support :emoji: display in git-commit-mode and magit","description":"Add support for rendering GitHub-style emoji codes (e.g., :smile:, :rocket:, :lipstick:) as actual emoji characters in git-commit-mode and magit buffers. This would improve readability of commit messages that use conventional emoji prefixes.","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-30T23:00:07.342878+13:00","updated_at":"2025-10-31T12:10:25.731621+13:00","closed_at":"2025-10-31T12:10:25.731621+13:00"}
