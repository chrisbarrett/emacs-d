{"id":"emacs-00a1f4e9","content_hash":"a9e13740668bf78a687a06449468fff0890671219d071593494bcbe7604c3590","title":"Rapidly switch to or create worktree tab with M-S-o","description":"Implement M-S-o command that shows a completing-read prompt for existing worktrees. If the user enters a non-matching input, create a new worktree under .worktrees/ with that input as the branch name. The completing-read should validate input to ensure only legal git branch names are accepted.\n\nWhen opening a new tab for a worktree:\n- Open dired at the worktree root\n- Start a claude-code-ide instance for that worktree\n\nIf the tab already exists, simply switch to it.","acceptance_criteria":"- M-S-o opens a completing-read prompt showing existing worktrees\n- Entering a non-matching name creates a new worktree under .worktrees/ with that branch name\n- Input validation prevents illegal git branch names\n- New tabs open with dired at worktree root\n- New tabs have a claude-code-ide instance running for that worktree\n- Existing tabs are switched to rather than recreated","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-27T14:06:17.696599+13:00","updated_at":"2025-11-01T22:29:46.251749+13:00","closed_at":"2025-10-28T20:23:10.287059+13:00","dependencies":[{"issue_id":"emacs-00a1f4e9","depends_on_id":"emacs-9c75319a","type":"blocks","created_at":"2025-10-27T14:06:17.697383+13:00","created_by":"daemon"}]}
{"id":"emacs-1ed27f39","content_hash":"630b1ec807e98d38d083e05370aa30914512b183158058b3ac1017f0171e95dd","title":"Use project name for tab-bar initial tab in frames","description":"Customize tab-bar to automatically name the initial tab based on project context. For the initial frame, use the current project name. For dedicated frames (project-specific frames), use the frame's dedicated project name. This will provide better context when working with multiple projects across different frames. Should leverage tab-bar's customization hooks like tab-bar-tab-name-function or tab-bar-tab-name-format-function.","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-29T06:46:52.224402+13:00","updated_at":"2025-11-01T22:29:46.246491+13:00","closed_at":"2025-10-29T09:00:23.012277+13:00"}
{"id":"emacs-4cf0181a","content_hash":"ec427ea1e87b3d7ba128c1da4004a4d2198c40cba4daae38b65e3830cffd140a","title":"M-g opens custom transient with git actions for worktrees","description":"Implement M-g keybinding that opens a custom transient menu with common git actions specifically designed for worktree management. This will serve as the central hub for worktree operations.","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-27T14:14:44.493422+13:00","updated_at":"2025-11-01T22:29:46.252381+13:00","closed_at":"2025-10-28T20:23:22.280721+13:00","dependencies":[{"issue_id":"emacs-4cf0181a","depends_on_id":"emacs-9c75319a","type":"blocks","created_at":"2025-10-27T14:14:44.494425+13:00","created_by":"daemon"}]}
{"id":"emacs-55761d1d","content_hash":"432be20ec2315c922382e385dfec1507d83aa8c4fa1d435ea52dd11d8e57a7a4","title":"Create magit-style interface for Linear","description":"Build a magit-style transient interface for interacting with Linear issue tracking. Should provide keyboard-driven UI for viewing issues, creating/updating issues, changing status, assigning work, managing labels/projects, and navigating between related issues. Use Linear API to integrate seamlessly without leaving Emacs.","status":"open","priority":2,"issue_type":"feature","created_at":"2025-10-29T06:38:56.814045+13:00","updated_at":"2025-11-01T22:29:46.245593+13:00"}
{"id":"emacs-58511580","content_hash":"bad977dc8474c52d90cc4e7e664348726573030fab77b6a862b0be2a2d5ea26b","title":"Support :emoji: display in git-commit-mode and magit","description":"Add support for rendering GitHub-style emoji codes (e.g., :smile:, :rocket:, :lipstick:) as actual emoji characters in git-commit-mode and magit buffers. This would improve readability of commit messages that use conventional emoji prefixes.","status":"open","priority":2,"issue_type":"feature","created_at":"2025-10-29T06:35:04.207623+13:00","updated_at":"2025-11-01T22:29:46.254062+13:00"}
{"id":"emacs-5857448b","content_hash":"d45be7f41334d436f9b8ce7158d45866f96cd7df74e06ebc8bb2544da99549b5","title":"Make TAB in markdown buffers attempt snippet expansion before markdown-cycle in insert state","description":"Currently TAB in markdown buffers calls markdown-cycle. Update the key binding so that in Evil insert state, TAB first attempts yasnippet/templ snippet expansion, and only falls back to markdown-cycle if no snippet expansion occurs.\n\nThis will make snippet expansion work more intuitively in markdown mode without losing the existing cycling behavior when snippets aren't applicable.","status":"in_progress","priority":2,"issue_type":"chore","created_at":"2025-11-01T18:09:18.614294+13:00","updated_at":"2025-11-01T22:29:46.249752+13:00"}
{"id":"emacs-6147a721","content_hash":"e16aca1fd678eb327bd24a72d5e89b8153e05a338e1c402916c66b6208a6840e","title":"Investigate **loose** buffer save prompt when killing buffers","description":"When trying to kill an unsaved buffer, Emacs also prompts whether to save a buffer called **loose**. This behavior is unexpected and needs investigation to determine which package is creating this buffer.","status":"open","priority":2,"issue_type":"bug","created_at":"2025-10-27T13:54:29.020899+13:00","updated_at":"2025-11-01T22:29:46.243841+13:00"}
{"id":"emacs-67066ad8","content_hash":"926e0f6d6aaae1bb8bf31e2e1dba6f4293b557e2d01f74d862375999debeff7b","title":"Create magit-style interface for beads (bd)","description":"Build a magit-style transient interface for interacting with beads issue tracking system. Should provide keyboard-driven UI for common bd operations: listing issues, creating/updating/closing issues, managing dependencies, viewing issue details, and navigating between related issues. Similar to how magit provides an elegant interface to git.","status":"open","priority":2,"issue_type":"feature","created_at":"2025-10-29T06:38:56.766037+13:00","updated_at":"2025-11-01T22:29:46.24487+13:00"}
{"id":"emacs-6cf6a599","content_hash":"4009a32de3182a0a7eece083f1898549d2f44c5ee7886ecaff95be1d75f48304","title":"Add r binding to transient: rebase worktree on main","description":"Add r binding to the worktree transient that rebases the current worktree branch on main.","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-27T14:14:53.241131+13:00","updated_at":"2025-11-01T22:29:46.253724+13:00","closed_at":"2025-10-28T20:23:57.640072+13:00","dependencies":[{"issue_id":"emacs-6cf6a599","depends_on_id":"emacs-4cf0181a","type":"blocks","created_at":"2025-10-27T14:14:53.241768+13:00","created_by":"daemon"}]}
{"id":"emacs-80dc54ea","content_hash":"bdae026ebd99271174d8acf1df57f5843f6796878896887445c41d9a9033035e","title":"Use tabs to represent git worktrees with M-S-, and M-S-. navigation","description":"Investigate using Emacs tabs to represent git worktrees, allowing users to switch between worktrees using M-S-, (previous) and M-S-. (next) keybindings.","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-27T14:02:19.396989+13:00","updated_at":"2025-11-01T22:29:46.251082+13:00","closed_at":"2025-10-28T20:22:54.473359+13:00","dependencies":[{"issue_id":"emacs-80dc54ea","depends_on_id":"emacs-9c75319a","type":"blocks","created_at":"2025-10-27T14:02:19.398051+13:00","created_by":"daemon"}]}
{"id":"emacs-839ed1e8","content_hash":"ff8a02d3292b2906ab962d205ae216770d01a6751f7b4e19e352d8a0d95c5177","title":"Add M binding to transient: merge to main and cleanup","description":"Add M binding to the worktree transient that merges the current worktree branch to main, then performs the same cleanup as the X binding (delete tab, worktree, and branch).","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-27T14:14:53.196196+13:00","updated_at":"2025-11-01T22:29:46.253378+13:00","closed_at":"2025-10-28T20:23:43.730032+13:00","dependencies":[{"issue_id":"emacs-839ed1e8","depends_on_id":"emacs-4cf0181a","type":"blocks","created_at":"2025-10-27T14:14:53.196822+13:00","created_by":"daemon"},{"issue_id":"emacs-839ed1e8","depends_on_id":"emacs-94eea8ad","type":"blocks","created_at":"2025-10-27T14:14:59.010802+13:00","created_by":"daemon"}]}
{"id":"emacs-84f4c8a0","content_hash":"21c4c9d4fc811e3684caf4fba1710462aa2dfd8d617c70c799130b727facbf42","title":"Add dimmer background for non-selected windows","description":"Implement visual distinction between selected and non-selected windows by dimming the background color of inactive windows. Need to provide appropriate dimming values for both modus-operandi (light) and modus-vivendi (dark) themes to ensure good contrast and readability. Consider using auto-dim-other-buffers-mode or implementing custom face remapping for default face in non-selected windows.","status":"open","priority":2,"issue_type":"feature","created_at":"2025-10-29T06:43:55.471599+13:00","updated_at":"2025-11-01T22:29:46.246014+13:00"}
{"id":"emacs-94eea8ad","content_hash":"288520985e9ebee457cc1524efeab4a1fd2c39d05dc0f5402b0ca63bb6ec207c","title":"Add X binding to transient: delete tab, worktree, and branch","description":"Add X binding to the worktree transient that deletes the current tab, removes the worktree, and deletes the branch. Must check for unstaged or uncommitted changes first and error with a message telling the user to get to a clean state before deletion.","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-27T14:14:53.151644+13:00","updated_at":"2025-11-01T22:29:46.252969+13:00","closed_at":"2025-10-28T20:23:31.487909+13:00","dependencies":[{"issue_id":"emacs-94eea8ad","depends_on_id":"emacs-4cf0181a","type":"blocks","created_at":"2025-10-27T14:14:53.152261+13:00","created_by":"daemon"}]}
{"id":"emacs-9c75319a","content_hash":"6fb0f7e6ba611ef1a8c24912f4e1112f457678f9eb6b6f1fe7664e14e91e991a","title":"Backport zellij claude-code workspace workflow into Emacs","description":"Port the zellij-based Claude Code workspace workflow into Emacs, enabling seamless management of multiple workspaces and worktrees within the editor.","status":"closed","priority":2,"issue_type":"epic","created_at":"2025-10-27T14:02:13.847115+13:00","updated_at":"2025-11-01T22:29:46.250281+13:00","closed_at":"2025-10-28T20:24:08.19949+13:00"}
{"id":"emacs-faf46391","content_hash":"19ebfdc97eed37000cf31a1ae4b943f994b87072cdeb63c5b45cc185e5b0454a","title":"Investigate tab groups","description":"Research tab groups functionality in Emacs to understand how it works and whether it could be useful for organizing tabs in addition to or instead of the current tab-bar implementation.\n\nPotential use case: Tab groups might be a useful alternative to having multiple Emacs frames for organizing different workspaces or contexts. Since it's a newer feature, need to understand:\n- How tab groups differ from tab-bar tabs\n- Whether they can replace multi-frame workflows\n- Integration possibilities with current tab-bar setup\n- Pros/cons compared to frames","status":"open","priority":2,"issue_type":"task","created_at":"2025-11-01T17:10:50.660433+13:00","updated_at":"2025-11-01T22:29:46.248011+13:00"}
